// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  WRITER
  READER
}

enum ContentType {
  HEADING
  SUBHEADING
  PARAGRAPH
  CODE_SNIPPET
  IMAGE
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  name       String
  avatar_url String?
  role       Role      @default(READER)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  blogs      Blog[]
  comments   Comment[]
}

model Blog {
  id             String    @id @default(uuid())
  title          String
  slug           String    @unique
  author_id      String
  author         User      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  votes          Int       @default(0)
  blog_thumbnail String?
  contents       BlogContent[]
  comments       Comment[]
}

model BlogContent {
  id         String      @id @default(uuid())
  blog_id    String
  blog       Blog        @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  type       ContentType
  content    String
  order      Int
  metadata   Json?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  @@index([blog_id, order])
}

model Comment {
  id         String    @id @default(uuid())
  blog_id    String
  user_id    String
  parent_id  String?
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  blog       Blog      @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("CommentReplies", fields: [parent_id], references: [id], onDelete: SetNull)
  replies    Comment[] @relation("CommentReplies")

  @@index([blog_id])
  @@index([parent_id])
}
